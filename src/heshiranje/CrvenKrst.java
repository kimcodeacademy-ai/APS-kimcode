//–í–æ —Ä–∞–º–∫–∏ –Ω–∞ –µ–¥–Ω–∞ —Ö—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏j–∞, –ø–æ—Ç—Ä–µ–±–Ω–æ –µ –¥–∞ —Å–µ –Ω–∞–ø—Ä–∞–≤–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∫—Ä–≤–Ω–∏—Ç–µ –≥—Ä—É–ø–∏ –∫–æ–∏ —Å–µ –Ω–∞ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—ö–µ –∑–∞ –¥–æ–Ω–∞—Ü–∏j–∞,
// –∏ –æ–¥ –∫–æ–∏ –¥–æ–Ω–∞—Ç–æ—Ä–∏.
//–ü–æ–¥–∞—Ç–æ—á–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
//–ü–æ–¥–≥—Ä—É–ø–∏—Ç–µ –ê1+, –ê2+ –ø—Ä–∏–ø–∞¬¥–≥–∞–∞—Ç –Ω–∞ –∫—Ä–≤–Ω–∞ –≥—Ä—É–ø–∞ –ê+, –¥–æ–¥–µ–∫–∞ –ê1- , –ê2- –ø—Ä–∏–ø–∞¬¥–≥–∞–∞—Ç
//–Ω–∞ –≥—Ä—É–ø–∞ –ê-.
//–í–ª–µ–∑: –í–æ –ø—Ä–≤–∏–æ—Ç —Ä–µ–¥ –æ–¥ –≤–ª–µ–∑–æ—Ç –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –Ω–∞ –ø–∞—Ä–æ–≤–∏ ùëÅ, –∞ –≤–æ —Å–µ–∫–æj –Ω–∞—Ä–µ–¥–µ–Ω
//—Ä–µ–¥ —Å–µ –¥–∞–¥–µ–Ω–∏ –ø–∞—Ä–æ–≤–∏—Ç–µ (–¥–æ–Ω–∞—Ç–æ—Ä, –∫—Ä–≤–Ω–∞ –≥—Ä—É–ø–∞).
//–ò–∑–ª–µ–∑: –î–∞ —Å–µ –∏—Å–ø–µ—á–∞—Ç–∏ –ø–æ –∫–æ–ª–∫—É –¥–æ–Ω–∞—Ç–æ—Ä–∏ –∏–º–∞ –æ–¥ —Å–µ–∫–æj–∞ –∫—Ä–≤–Ω–∞ –≥—Ä—É–ø–∞ —Å–æ–≥–ª–∞—Å–Ω–æ
//–≤–Ω–µ—Å–µ–Ω–∏—Ç–µ –ø–æ–¥–∞—Ç–æ—Ü–∏.
//–ü—Ä–∏–º–µ—Ä:
//–í–ª–µ–∑:
//        5
//Alek A1+
//Dejan B‚àí
//Sandra A+
//Trajce 0+
//Rebeka A1‚àí
//–ò–∑–ª–µ–∑:
//A+=2
//B‚àí=1
// 0+=1
//A‚àí=1



package heshiranje.zadaci;

import heshiranje.MapEntry;
import heshiranje.OBHT;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

// kluc vednost
// kluc: krvna grupa
// vrednost: counter od krvnite grupi - grupirani spored (a+)
public class CrvenKrst {
    public static void main(String[] args) throws IOException {
        OBHT<String, Integer> hashtable = new OBHT<>(11);
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());

        String input;

        for(int i = 0; i < N; i++){
            // Dejan A1+
            input = br.readLine();
            String[] row= input.split(" ");
            String key = row[1];
            // A1+
            key = key.replaceAll("[1-2]", "");
            // A+

            // dali ne postoi takov element vo hash tabelata
            if(hashtable.search(key) == -1){
                // dodavam nov map key
                hashtable.insert(key, 1);
            }
            else{
                hashtable.insert(
                        key, hashtable.search(key) + 1
                );
            }
        }

        System.out.println(hashtable);
    }
}
